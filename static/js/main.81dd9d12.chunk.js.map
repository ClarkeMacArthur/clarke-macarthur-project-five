{"version":3,"sources":["Assets/tape1.svg","Assets/tape2.svg","Assets/tape3.svg","Assets/tape4.svg","Assets/tape5.svg","Assets/tape6.svg","Assets/rightArrow.svg","Assets/leftArrow.svg","Casettes.js","Header.js","MixNameForm.js","Assets/jcard2.jpg","Playlist.js","SongSearch.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Cassettes","prevCassette","e","state","count","setState","nextCassette","tapeImages","id","src","tape1","alt","tape2","tape3","tape4","tape5","tape6","className","this","props","mixName","onClick","leftArrow","rightArrow","Component","Header","MixNameForm","nameValue","setNameValue","saveNameValue","onSubmit","action","htmlFor","sr-only","type","maxLength","placeholder","onChange","value","Playlist","songArtists","songTitles","jcard","SongSearch","songArtist","songValue","setSongValue","setArtistValue","saveSongArtistValue","Footer","href","App","handleHide","isActive","target","preventDefault","Swal","fire","title","text","icon","confirmButtonText","tapeName","artistName","songTitle","axios","url","method","responseType","params","s","t","then","results","newSongArray","songArray","data","track","strTrack","song","newArtistArray","artistArray","strArtist","artist","catch","addToArray","updatedArtistArray","updatedSongArray","showCancelButton","result","isDenied","isConfirmed","document","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81dd9d12.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tape1.0166e222.svg\";","export default __webpack_public_path__ + \"static/media/tape2.df559ec7.svg\";","export default __webpack_public_path__ + \"static/media/tape3.cedbe947.svg\";","export default __webpack_public_path__ + \"static/media/tape4.2c9dee8f.svg\";","export default __webpack_public_path__ + \"static/media/tape5.0f20fc87.svg\";","export default __webpack_public_path__ + \"static/media/tape6.63179cb3.svg\";","export default __webpack_public_path__ + \"static/media/rightArrow.4a4045b7.svg\";","export default __webpack_public_path__ + \"static/media/leftArrow.06b3d1d7.svg\";","import { Component } from 'react';\r\nimport tape1 from './Assets/tape1.svg';\r\nimport tape2 from './Assets/tape2.svg';\r\nimport tape3 from './Assets/tape3.svg';\r\nimport tape4 from './Assets/tape4.svg';\r\nimport tape5 from './Assets/tape5.svg';\r\nimport tape6 from './Assets/tape6.svg';\r\nimport rightArrow from './Assets/rightArrow.svg'\r\nimport leftArrow from './Assets/leftArrow.svg'\r\nimport './App.css'; \r\n\r\n\r\nclass Cassettes extends Component {\r\n    constructor(){\r\n        super()\r\n        // Create an array of the cassette tape images\r\n        this.state = {\r\n            tapeImages: [\r\n                {\r\n                    id: 1,\r\n                    src: tape1,\r\n                    alt:\"a light sea green audio cassette tape with a yellow, white and font label that reads 'Stereo tape' and 'A' (for side A)\"\r\n                },\r\n                {\r\n                    id: 2,\r\n                    src: tape2,\r\n                    alt:\"an orange audio cassette tape with a yelow label with a white stripe at the top that has the letter A and a black underline to label the name of the cassette. It also says 'audio' at the bottom center and has the number 45 in the bottom right corner\"\r\n                },\r\n                {\r\n                    id: 3,\r\n                    src: tape3,\r\n                    alt: \"a grey audio cassette tape with a white label. There is a rainbow stripe across the horizontal middle of the cassette. At the top there is the capital letter A with underline space to label your tape. Across the bottom of the label it reads '90 minute stereo'\"\r\n                },\r\n                {\r\n                    id: 4,\r\n                    src: tape4,\r\n                    alt:\"a bright lime green audio cassette tape with two yellow labels, one at the top that has a white stripe to label the name of your tape, and one at the bottom that reads in darker green letters:'Side A, Low Noise, 45'\"\r\n                },\r\n                {\r\n                    id: 5,\r\n                    src: tape5,\r\n                    alt: \"a blue audio cassette tape with an orangered label that has a white strip across the top to label your tape's name. On the left side there are two white check boxes with white text labels in and out. On the right side is the letter A in white text to indicate that this is side A of the tape.\"\r\n                },\r\n                {\r\n                    id: 6,\r\n                    src: tape6,\r\n                    alt: \"a light coral pink audio cassette tape that has a light blue label. There is a white strip across the top to label the name of your tape. At the bottom in white text it reads:'super stereo, A, 90'\"\r\n                }\r\n            ],\r\n            // mixName:\"Awesome Mix Vol. 1\",\r\n            // counter that increases/decreases with button click. Used to reference the images on the array\r\n            count: 0,\r\n        }\r\n    }\r\n\r\n    // Event handlers for the button click that advances to the next tape or goes back to the previous one\r\n\r\n        prevCassette = (e) => {\r\n            if (this.state.count > 0) {\r\n                this.setState({\r\n                    count: this.state.count - 1\r\n                }) \r\n            }\r\n        }\r\n\r\n        nextCassette =(e) => {\r\n            if (this.state.count < 5) {\r\n                this.setState({\r\n                    count:this.state.count + 1\r\n                })\r\n            } \r\n        }\r\n\r\n    // Renders Cassettes to the page\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"cassette\">\r\n                {/* displays the mixName from data the user inputs on the NixNameForm */}\r\n                <p className=\"tapeName\">{this.props.mixName}</p>\r\n\r\n                {/* image of cassette that changes once button is clicked */}\r\n                <img className=\"cassetteTape\" src={this.state.tapeImages[this.state.count].src} alt={this.state.tapeImages[this.state.count].alt}/>\r\n\r\n                {/* button to cycle through different cassette images in the array */}\r\n                <div className=\"buttonFlex\">\r\n\r\n                {/* Buttons that when clicked, advance or reverse the cassette images */}\r\n                <button className=\"tapeButton\" onClick={this.prevCassette}><img src={leftArrow} alt=\"left pointing arrow, click to select the previous cassette\"/></button>\r\n\r\n                <p>Choose Your Tape!</p>\r\n\r\n                <button className=\"tapeButton\" onClick={this.nextCassette}><img src={rightArrow} alt=\"right pointing arrow, click to select the next cassette\"/></button>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cassettes;","import { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass Header extends Component {\r\n    // renders header to the page \r\n    render() {\r\n        return(\r\n            <header>\r\n                <div className=\"wrapper\">\r\n                <h1>MixTapE 2020</h1>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","\r\n\r\nconst MixNameForm = (props) => {\r\n    // declare props\r\n    const { nameValue, setNameValue, saveNameValue } = props\r\n        \r\n    return (\r\n            <div className=\"nameFormContainer\">\r\n                <h2>Name your mix!</h2>\r\n                {/* form to select a name to be displayed on the Cassette */}\r\n                <form \r\n                onSubmit={saveNameValue}\r\n                className=\"nameForm\" \r\n                action=\"submit\" \r\n                id=\"nameForm\">\r\n                    <div className=\"nameContainer\">\r\n                        <label htmlFor=\"getName\" sr-only=\"name your mix tape!\"></label>\r\n\r\n                        <input \r\n                        type=\"text\"\r\n                        id=\"getName\"\r\n                        maxLength = \"20\"\r\n                        placeholder=\"ex. Awesome Mix Vol. 1\"\r\n                        onChange={setNameValue}\r\n                        value={nameValue} />\r\n\r\n                        <p>max. length 20 characters</p>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"nameButton\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default MixNameForm;","export default __webpack_public_path__ + \"static/media/jcard2.0cc03e28.jpg\";","import {Component} from 'react';\r\nimport jcard from './Assets/jcard2.jpg'\r\n\r\nclass Playlist extends Component {\r\n    // Renders the Playlist to the page - the Track card with songs chosen by the user on the SongSearch Form\r\n    render() {\r\n        return(\r\n            <div className=\"playlist\">\r\n                <div className=\"songListContainer\">\r\n\r\n                <ul className=\"songList1\">\r\n                    {/* render each song and artist on the arrays returned from the axios call in a list  */}\r\n                    <li><p>{this.props.songArtists[0]} - {this.props.songTitles[0]}</p></li>\r\n                    <li><p>{this.props.songArtists[1]} - {this.props.songTitles[1]}</p></li>\r\n                    <li><p>{this.props.songArtists[2]} - {this.props.songTitles[2]}</p></li>\r\n                    <li><p>{this.props.songArtists[3]} - {this.props.songTitles[3]}</p></li>\r\n                    <li><p>{this.props.songArtists[4]} - {this.props.songTitles[4]}</p></li>\r\n                </ul>\r\n                <ul className=\"songList2\">\r\n                    <li><p>{this.props.songArtists[5]} - {this.props.songTitles[5]}</p></li>\r\n                    <li><p>{this.props.songArtists[6]} - {this.props.songTitles[6]}</p></li>\r\n                    <li><p>{this.props.songArtists[7]} - {this.props.songTitles[7]}</p></li>\r\n                    <li><p>{this.props.songArtists[8]} - {this.props.songTitles[8]}</p></li>\r\n                    <li><p>{this.props.songArtists[9]} - {this.props.songTitles[9]}</p></li>\r\n                </ul>\r\n                </div>\r\n                {/* image of a cassette track card that the list will be displayed over */}\r\n                <img className =\"trackCard\" src={jcard} alt=\"a cassette tape track card. It is a white card with two lined lists, 'Side A' and 'Side B'. This is where the list of songs is displayed.\"/>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","\r\nconst SongSearch = (props) => {\r\n    // declare props\r\n    const { songArtist, songValue, setSongValue, setArtistValue, saveSongArtistValue } = props\r\n\r\n    return (\r\n        <div className=\"songFormContainer\">\r\n            <h2>Search for Songs!</h2>\r\n            {/* form to collect songTitle and artistName for the axios call to AudioDB API */}\r\n            <form\r\n                onSubmit={saveSongArtistValue}\r\n                className=\"songForm\"\r\n                action=\"submit\"\r\n                id=\"songForm\">\r\n                \r\n                    <label htmlFor=\"searchSong\" sr-only=\"Search for a song! Type artist and song title, separated by a comma\"></label>\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"searchSong\"\r\n                        placeholder=\"Artist Name\"\r\n                        onChange={setArtistValue}\r\n                        value={songArtist} />\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"searchSong\"\r\n                        placeholder=\"Song Title\"\r\n                        onChange={setSongValue}\r\n                        value={songValue} />\r\n\r\n                <div>\r\n                    <button className=\"nameButton\">Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongSearch","import { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    // renders the footer to the page\r\n    render () {\r\n        return (\r\n            <footer>\r\n                <p>Made with 💖 by Clarke MacArthur</p>\r\n                <p>at <a href=\"https://junocollege.com\">Juno College</a></p>\r\n                <p>Images by pch.vector at <a href=\"https://www.freepik.com/vectors/vintage\">www.freepik.com</a></p>\r\n            </footer>\r\n\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","// ********Import Packages*******\nimport { Component } from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\n// ********Import CSS************\nimport 'sweetalert2/dist/sweetalert2.min.css';\nimport './App.css';\n// *******Import Components******\nimport Cassettes from './Casettes';\nimport Header  from './Header.js';\nimport MixNameForm from './MixNameForm';\nimport Playlist from './Playlist';\nimport SongSearch from './SongSearch';\nimport Footer from './Footer';\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isActive: true,\n      nameValue: \"\",\n      tapeName: \"\",\n      artistName: \"\",\n      songTitle: \"\",\n      song: \"\",\n      artist: \"\",    \n      songArray: [],\n      artistArray: [],\n      updatedSongArray: [],\n      updatedArtistArray: [],\n      count:0      \n    }\n  }\n\n  // Function to hide components on the page\n\n  handleHide = () => {\n    this.setState({\n      isActive: false,\n    });\n  };\n\n\n// Name Your Mix Event Handlers\n\n  setNameValue = (e) => {\n    this.setState({\n      nameValue: e.target.value\n    })\n  }\n\n  saveNameValue =(e) => {\n    e.preventDefault();\n\n    if (this.state.nameValue === \"\") {\n\n      // Error handling for no name entered\n      Swal.fire({\n        title: 'Missing info',\n        text: 'Enter a name for your mix!',\n        icon: 'error',\n        confirmButtonText: 'Okay',\n      }); \n\n    } else {\n      // Updates tapeName in State so it can be passed to Cassettes\n      this.setState({\n        tapeName: this.state.nameValue\n      }, () => {\n        this.setState({\n          nameValue: '',\n        });\n      });\n\n      this.handleHide();\n    }\n\n  }\n\n// Song Search Event Handlers\nsetArtistValue = (e) => {\n  // collect artist name from user for axios call\n  this.setState({\n    artistName: e.target.value\n  })\n}\n\nsetSongValue = (e) => {\n  // collect song title from user for axios call\n  this.setState({\n    songTitle: e.target.value\n  })\n}\n\n// take song title and artist name and make axios call\nsaveSongArtistValue = (e) => {\n  // prevent page refresh on submit\n  e.preventDefault();\n\n  // Axios call to AudioDB API\n  axios({\n    url: `https://theaudiodb.com/api/v1/json/523532/searchtrack.php`,\n    method: 'GET',\n    responseType: 'json',\n    params: {\n      s:this.state.artistName,\n      t:this.state.songTitle\n    }\n  }).then((results) => {\n    // create array that adds new results to copy of the song Array\n    const newSongArray = [...this.state.songArray, results.data.track[0].strTrack]\n    \n    this.setState({\n      // update songArray on state to the newSongArray with the results. Update song to display the song title result to the user in the results section. Clear inputs for songTitle\n      songArray: newSongArray,\n      song:results.data.track[0].strTrack,\n      songTitle: \"\"\n    })\n    \n    // create array that adds new results to copy of the artist Array\n    const newArtistArray = [...this.state.artistArray, results.data.track[0].strArtist]\n\n    this.setState({\n      // update artistArray on state to the newArtistArray with the results. Update artist to display the artist name result to the user in the results section. Clear inputs for artistName\n      artistArray: newArtistArray,\n      artist:results.data.track[0].strArtist,\n      artistName: \"\",\n    })\n    \n    \n  }).catch(() =>{\n    // error handling for if no song is found by the API\n    Swal.fire({\n      title: \"Oops! We couldn't find that song!\",\n      text: \"Please try again\",\n      icon: \"error\",\n      confirmButtonText: \"Got it!\",\n    })\n\n  })\n}\n\n\n// button to update props array passed to Playlist.js\naddToArray = (e) => {\n  // error handling if search form not complete\n  if (this.state.artist === \"\" || this.state.song === \"\") {\n    Swal.fire({\n      title: \"Nothing to add to mix!\",\n      text: \"Please Search for a Song\",\n      icon: \"error\",\n      confirmButtonText: \"Got it!\",\n    })\n    // conditional to ensure only 10 songs are added to the list\n  } else  if (this.state.count < 10) {\n    this.setState({\n      updatedArtistArray: this.state.artistArray,\n      updatedSongArray: this.state.songArray,\n      count: this.state.count + 1,\n      song: \"\",\n      artist: \"\"\n    })\n  } else {\n    // once 10 songs are logged, alert user that their mix is finished\n    Swal.fire({\n      title: \"Your Mix is Finished!\",\n      text: \"Would you like to play again? Clicking yes will refresh the page and clear all inputs.\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n    }).then((result) => {\n\n      // If no, close modal\n      if (result.isDenied) {\n\n        // If yes, then refresh page and clear inputs\n      } else if (result.isConfirmed) {\n        document.location.reload();\n      }\n    })\n  }\n}\n\n\n\n\n// render elements to the page\n  render() {\n    return (\n      <div className=\"App\">\n        {/* header element */}\n        < Header />\n        \n        <main>\n          <div className=\"wrapper\">\n            <div className=\"cassettePlaylist\">\n              {/* Images of cassettes and button to change color */}\n              < Cassettes mixName={this.state.tapeName} />\n\n              {/* track card with list of songs chosen by user */}\n              < Playlist \n              songTitles={this.state.updatedSongArray}\n              songArtists={this.state.updatedArtistArray}\n              />\n            </div>\n            {/* Name your Mix form, will display upon render */}\n            {this.state.isActive === true && (\n              <MixNameForm \n              nameValue={this.state.nameValue}\n              setNameValue={this.setNameValue}\n              saveNameValue={this.saveNameValue}/>\n            )}\n            \n            {/* Song form, displayed conditionally once the MixNameForm is submitted */}\n            {this.state.isActive === false && (\n                < SongSearch \n                songArtist={this.state.artistName}\n                songValue={this.state.songTitle}\n                setArtistValue={this.setArtistValue}\n                setSongValue={this.setSongValue}\n                saveSongArtistValue={this.saveSongArtistValue}\n                />\n              )}\n              {/* results display */}\n            <div className=\"results\">\n              <p>{this.state.artist} - {this.state.song}</p>\n            <button className=\"nameButton\" onClick={this.addToArray} >Add to Mix</button>\n          </div>\n        </div>\n        </main>\n        {/* Footer */}\n        < Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}